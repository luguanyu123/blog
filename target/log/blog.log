2022-04-29 20:21:35.069 [main] INFO  com.lu.BlogApplication - Starting BlogApplication v0.0.1-SNAPSHOT on DESKTOP-O6H0IHG with PID 105068 (D:\shangguigu\bbb\blog-master\target\blog-0.0.1-SNAPSHOT.jar started by dell in D:\shangguigu\bbb\blog-master\target)
2022-04-29 20:21:35.081 [main] INFO  com.lu.BlogApplication - The following profiles are active: dev
2022-04-29 20:21:36.780 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [com.lu.config.ShiroConfig$$EnhancerBySpringCGLIB$$f9566535] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:36.857 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:36.871 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$46c76281] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:36.882 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:36.915 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:36.963 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.zaxxer.hikari.HikariDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:37.003 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:37.171 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:37.191 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:37.329 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:37.336 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy63] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:37.339 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userServiceImpl' of type [com.lu.service.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:37.341 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRealm' of type [com.lu.config.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:39.054 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-04-29 20:21:39.570 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2022-04-29 20:21:39.583 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2022-04-29 20:21:39.584 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2022-04-29 20:21:39.584 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.37]
2022-04-29 20:21:39.677 [main] INFO  o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2022-04-29 20:21:39.677 [main] INFO  o.s.b.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 4493 ms
2022-04-29 20:21:40.325 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2022-04-29 20:21:40.488 [main] INFO  o.s.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2022-04-29 20:21:40.830 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2022-04-29 20:21:40.879 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2022-04-29 20:21:40.901 [main] INFO  com.lu.BlogApplication - Started BlogApplication in 6.488 seconds (JVM running for 6.994)
2022-04-29 20:21:50.689 [http-nio-8080-exec-1] INFO  o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-04-29 20:21:50.690 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2022-04-29 20:21:50.709 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 18 ms
2022-04-29 20:21:50.781 [http-nio-8080-exec-1] INFO  com.lu.aspect.LogAspect - Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.lu.web.IndexController.indexPage', args=[1, {}]}
2022-04-29 20:21:50.807 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2022-04-29 20:21:51.040 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2022-04-29 20:21:51.133 [http-nio-8080-exec-1] DEBUG com.lu.mapper.BlogMapper.findPublishedBlog_COUNT - ==>  Preparing: SELECT count(0) FROM t_blog b LEFT OUTER JOIN t_type t ON b.type_id = t.id JOIN t_user u ON b.user_id = u.id WHERE published = 1
2022-04-29 20:21:51.164 [http-nio-8080-exec-1] DEBUG com.lu.mapper.BlogMapper.findPublishedBlog_COUNT - ==> Parameters: 
2022-04-29 20:21:51.266 [http-nio-8080-exec-1] TRACE com.lu.mapper.BlogMapper.findPublishedBlog_COUNT - <==    Columns: count(0)
2022-04-29 20:21:51.266 [http-nio-8080-exec-1] TRACE com.lu.mapper.BlogMapper.findPublishedBlog_COUNT - <==        Row: 8
2022-04-29 20:21:51.269 [http-nio-8080-exec-1] DEBUG com.lu.mapper.BlogMapper.findPublishedBlog_COUNT - <==      Total: 1
2022-04-29 20:21:51.274 [http-nio-8080-exec-1] DEBUG com.lu.mapper.BlogMapper.findPublishedBlog - ==>  Preparing: select b.* ,t.id as id1,t.name, u.id as id2,u.avatar,u.nickname, u.email from t_blog b left outer join t_type t on b.type_id = t.id join t_user u on b.user_id=u.id where published=1 ORDER BY b.create_time DESC LIMIT ?
2022-04-29 20:21:51.276 [http-nio-8080-exec-1] DEBUG com.lu.mapper.BlogMapper.findPublishedBlog - ==> Parameters: 4(Integer)
2022-04-29 20:21:51.286 [http-nio-8080-exec-1] TRACE com.lu.mapper.BlogMapper.findPublishedBlog - <==    Columns: id, appreciation, commentabled, content, create_time, flag, first_picture, published, recommend, share_statement, title, update_time, views, type_id, user_id, description, id1, name, id2, avatar, nickname, email
2022-04-29 20:21:51.294 [http-nio-8080-exec-1] TRACE com.lu.mapper.BlogMapper.findPublishedBlog - <==        Row: 15, 1, 1, <<BLOB>>, 2022-04-08 19:10:54.017000, 转载, , 1, 0, 0, 反射, 2022-04-09 18:55:00.092000, 10, 10, 1, 主要是指程序可以访问、检测和修改它本身状态或行为的一种能力Reflection是Java被视为动态（或准动态）语言的一个关键性质。这个机制允许程序在运行时透过Reflection APIs取得任何一个已知名称的class的内部信息。, 10, javase, 1, D:\shangguigu\image\myavatar.jpg, lu, 834808263@qq.com
2022-04-29 20:21:51.297 [http-nio-8080-exec-1] TRACE com.lu.mapper.BlogMapper.findPublishedBlog - <==        Row: 14, 1, 1, <<BLOB>>, 2022-04-08 19:07:28.963000, 转载, , 1, 0, 0, mybatis简要, 2022-04-09 18:54:53.654000, 4, 11, 1, mybatis是什么？有什么特点？ 它是一款半自动的ORM持久层框架，具有较高的SQL灵活性，支持高级映射(一对一，一对多)，动态SQL，延迟加载和缓存等特性，但它的数据库无关性较低 , 11, mybatis, 1, D:\shangguigu\image\myavatar.jpg, lu, 834808263@qq.com
2022-04-29 20:21:51.300 [http-nio-8080-exec-1] TRACE com.lu.mapper.BlogMapper.findPublishedBlog - <==        Row: 13, 1, 1, <<BLOB>>, 2022-04-08 19:06:43.434000, 转载, , 1, 0, 0, Spring Boot 项目工程结构, 2022-04-09 18:54:42.039000, 0, 8, 1, src/main/java路径：主要编写业务程序
src/main/resources路径：存放静态文件和配置文件
src/test/java路径：主要编写测试程序, 8, springboot, 1, D:\shangguigu\image\myavatar.jpg, lu, 834808263@qq.com
2022-04-29 20:21:51.302 [http-nio-8080-exec-1] TRACE com.lu.mapper.BlogMapper.findPublishedBlog - <==        Row: 12, 1, 1, <<BLOB>>, 2022-04-08 19:05:25.600000, 转载, , 1, 1, 1, SpringMVC常用注解, 2022-04-08 19:05:25.600000, 0, 9, 1, SpringMVC常用注解, 9, springmvc, 1, D:\shangguigu\image\myavatar.jpg, lu, 834808263@qq.com
2022-04-29 20:21:51.303 [http-nio-8080-exec-1] DEBUG com.lu.mapper.BlogMapper.findPublishedBlog - <==      Total: 4
2022-04-29 20:21:51.310 [http-nio-8080-exec-1] DEBUG com.lu.mapper.TypeMapper.findAllType - ==>  Preparing: select *, b.id as id1, u.id as id2 from t_type t LEFT JOIN t_blog b on b.type_id = t.id LEFT JOIN t_user u ON b.user_id=u.id
2022-04-29 20:21:51.311 [http-nio-8080-exec-1] DEBUG com.lu.mapper.TypeMapper.findAllType - ==> Parameters: 
2022-04-29 20:21:51.313 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==    Columns: id, name, id, appreciation, commentabled, content, create_time, flag, first_picture, published, recommend, share_statement, title, update_time, views, type_id, user_id, description, id, avatar, create_time, email, nickname, password, type, update_time, username, id1, id2
2022-04-29 20:21:51.314 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 6, 遇到的异常, 8, 1, 1, <<BLOB>>, 2022-04-01 16:19:39.873000, 转载, https://www.sohu.com/a/197915708_657479, 1, 1, 0, Error creating bean with name ‘sqlSessionFactory‘ defined in class path reso, 2022-04-08 19:04:32.075000, 86, 6, 1, Error creating bean with name ‘sqlSessionFactory‘ defined in class path reso, 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 8, 1
2022-04-29 20:21:51.322 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 6, 遇到的异常, 9, 1, 1, <<BLOB>>, 2022-04-04 00:28:22.403000, 转载, https://unsplash.it/100/100?image=1005, 1, 1, 0, Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.5.2:install (default-cli) 的解决, 2022-04-08 19:04:19.967000, 11, 6, 1, Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.5.2:install (default-cli) 的解决, 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 9, 1
2022-04-29 20:21:51.325 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 7, spring, 10, 1, 1, <<BLOB>>, 2022-04-08 10:59:10.559000, 转载, , 1, 0, 0, 什么是ioc, 2022-04-08 19:04:25.714000, 1, 7, 1, 什么是ioc, 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 10, 1
2022-04-29 20:21:51.326 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 8, springboot, 13, 1, 1, <<BLOB>>, 2022-04-08 19:06:43.434000, 转载, , 1, 0, 0, Spring Boot 项目工程结构, 2022-04-09 18:54:42.039000, 0, 8, 1, src/main/java路径：主要编写业务程序
src/main/resources路径：存放静态文件和配置文件
src/test/java路径：主要编写测试程序, 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 13, 1
2022-04-29 20:21:51.328 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 9, springmvc, 11, 1, 1, <<BLOB>>, 2022-04-08 19:03:48.667000, 转载, , 1, 0, 0, Springmvc架构原理解析, 2022-04-08 19:04:06.759000, 2, 9, 1, Springmvc架构原理解析, 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 11, 1
2022-04-29 20:21:51.330 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 9, springmvc, 12, 1, 1, <<BLOB>>, 2022-04-08 19:05:25.600000, 转载, , 1, 1, 1, SpringMVC常用注解, 2022-04-08 19:05:25.600000, 0, 9, 1, SpringMVC常用注解, 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 12, 1
2022-04-29 20:21:51.334 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 10, javase, 15, 1, 1, <<BLOB>>, 2022-04-08 19:10:54.017000, 转载, , 1, 0, 0, 反射, 2022-04-09 18:55:00.092000, 10, 10, 1, 主要是指程序可以访问、检测和修改它本身状态或行为的一种能力Reflection是Java被视为动态（或准动态）语言的一个关键性质。这个机制允许程序在运行时透过Reflection APIs取得任何一个已知名称的class的内部信息。, 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 15, 1
2022-04-29 20:21:51.339 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 11, mybatis, 14, 1, 1, <<BLOB>>, 2022-04-08 19:07:28.963000, 转载, , 1, 0, 0, mybatis简要, 2022-04-09 18:54:53.654000, 4, 11, 1, mybatis是什么？有什么特点？ 它是一款半自动的ORM持久层框架，具有较高的SQL灵活性，支持高级映射(一对一，一对多)，动态SQL，延迟加载和缓存等特性，但它的数据库无关性较低 , 1, D:\shangguigu\image\myavatar.jpg, 2022-03-31 21:21:39, 834808263@qq.com, lu, 8a546497c3157c236f35f861b4b0b075, 123456, 2022-03-01 21:22:32, lu, 14, 1
2022-04-29 20:21:51.340 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 12, mysql, null, null, null, <<BLOB>>, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
2022-04-29 20:21:51.340 [http-nio-8080-exec-1] TRACE com.lu.mapper.TypeMapper.findAllType - <==        Row: 13, javaweb, null, null, null, <<BLOB>>, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
2022-04-29 20:21:51.341 [http-nio-8080-exec-1] DEBUG com.lu.mapper.TypeMapper.findAllType - <==      Total: 10
2022-04-29 20:21:51.342 [http-nio-8080-exec-1] INFO  com.lu.aspect.LogAspect - Result : index
